function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 22-Apr-2019 02:16:07.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx1 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 7.7689859596181e-20;
x1_step1.gain = 2;
x1_step1.ymin = -1;

% Layer 1
b1 = [32.005508659478415723;-3.6648436350931086203;-33.379337284415477427;-7.7588776857142089938;-4.2076637745821630077;4.13688105067330536;-4.6947792692011995896;-5.8740644479126054023;6.40765297040191939;-32.198778676755125616];
IW1_1 = [-32.287018373750932199;3.2986606718730575594;72.265707388154126534;27.780226004795277817;-15.803336127975851966;16.692712230079727931;-16.580585364107211177;-7.9116533398090034268;8.614426121617299259;-33.195550809415514948];

% Layer 2
b2 = 0.18362689385803368514;
LW2_1 = [0.21557637116992345305 0.61696022010824580484 0.10075095320071607297 0.13076241933370777448 14.25608295299340611 6.8117371919123455015 -7.5671405440014298804 -4.9455751677632164842 -4.4529734187936185208 0.029665540415567962645];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0557003604906204;
y1_step1.xoffset = -1.21773174206659;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
